import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

channels_list = ["@novosti_voinaa", "@truexanewsua", "@rian_ru", "@readovkanews", "@bbbreaking", "@moscowmap", "@ostorozhno_novosti", "@cvkredanw", "@voynareal", "@wargonzo", "@nexta_live", "@meduzalive", "@gosuslugi", "@novosti_voinam", "@pravdadirty", "@varlamov_news"]

bot_token = "5909054565:AAHilbEQT8IozDDmn7b4i_GkN4XE2FxHTrQ"

con = sqlite3.connect("Dataset/dataset.sql")
cur = con.cursor()

cur.execute("DROP TABLE posts")
cur.execute("CREATE TABLE posts(channel, text)")

async def save_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        print("Message received")
        channel = update.message.forward_from_chat.title
        text = update.message.text.replace("\n", "")  
        
        data = {"text": text}
        res = cur.execute("SELECT * FROM posts WHERE text = :text", data)
        if res.fetchmany() == []:
            data = {"channel": channel, "text": text}
            cur.execute("INSERT INTO posts (channel, text) VALUES (:channel, :text)", data)
            con.commit()

            data = {"text": text}
            res = cur.execute("SELECT * FROM posts WHERE text = :text", data)
            print(res.fetchmany())

        # res = cur.execute("SELECT * FROM posts")
        # print(res.fetchall())

    except Exception as e:
        print("An error occurred: " + str(e))



if __name__ == "__main__":
    application = ApplicationBuilder().token(bot_token).build()
    application.add_handler(MessageHandler(filters.ALL, save_post))
    application.run_polling()